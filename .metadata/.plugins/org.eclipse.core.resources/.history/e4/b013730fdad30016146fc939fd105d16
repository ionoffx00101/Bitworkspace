package bitjava.day01_06.charEX;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.HashMap;

public class TcpIpMultichatServer
{
	public static final int PORT = 3000;
	public static HashMap<String, PrintWriter> clients;

	public TcpIpMultichatServer()
	{
		// 1. 서버 소켓 생성
		// 2. 서버 소켓의 엑셉트 실행 및 대기 .. 클라이언트가 접속할때까지..
		// 5. 클라이언트가 접속을 시도하면 섹셉트 메소드가 클라이언트의 소켓을 리턴함
	}

	public static void main(String[] args)
	{
		new TcpIpMultichatServer();
	}

}

class serverReceiver extends Thread
{Socket socket;
BufferedReader reader;
PrintWriter writer;
HashMap<String, PrintWriter> clients;


	public serverReceiver(Socket socket, HashMap<String, PrintWriter> clients)
	{
		
		this.socket=socket;
		this.clients=clients;
		try
		{
			// 6. 소켓으로부터 인풋스트림 아웃풋스트림을 얻음
			reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			
		} catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	void sendToAll(String msg)
	{

	}

	@Override
	public void run()
	{
		// 7. 인풋스트림과 아웃풋스트림을 이용한 통신
		// 8. 연결이 끊어질때까지 통신

		// 9. 소켓 닫음
	}
}